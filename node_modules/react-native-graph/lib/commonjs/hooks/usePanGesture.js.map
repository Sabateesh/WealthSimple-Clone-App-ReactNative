{"version":3,"sources":["usePanGesture.ts"],"names":["usePanGesture","enabled","holdDuration","x","y","isPanGestureActive","panGesture","Gesture","Pan","activateAfterLongPress","onChange","e","value","onStart","onEnd","gesture","isActive"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAcO,SAASA,aAAT,OAAwE;AAAA,MAAjD;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,YAAY,GAAG;AAA1B,GAAiD;AAC7E,QAAMC,CAAC,GAAG,2CAAe,CAAf,CAAV;AACA,QAAMC,CAAC,GAAG,2CAAe,CAAf,CAAV;AACA,QAAMC,kBAAkB,GAAG,2CAAe,KAAf,CAA3B;AAEA,QAAMC,UAAU,GAAG,oBACjB,MACEC,mCAAQC,GAAR,GACGP,OADH,CACWA,OADX,EAEGQ,sBAFH,CAE0BP,YAF1B,EAGGQ,QAHH,CAGaC,CAAD,IAAO;AACfR,IAAAA,CAAC,CAACS,KAAF,GAAUD,CAAC,CAACR,CAAZ;AACAC,IAAAA,CAAC,CAACQ,KAAF,GAAUD,CAAC,CAACP,CAAZ;AACD,GANH,EAOGS,OAPH,CAOW,MAAM;AACbR,IAAAA,kBAAkB,CAACO,KAAnB,GAA2B,IAA3B;AACD,GATH,EAUGE,KAVH,CAUS,MAAM;AACXT,IAAAA,kBAAkB,CAACO,KAAnB,GAA2B,KAA3B;AACD,GAZH,CAFe,EAejB,CAACX,OAAD,EAAUC,YAAV,EAAwBG,kBAAxB,EAA4CF,CAA5C,EAA+CC,CAA/C,CAfiB,CAAnB;AAkBA,SAAO,oBACL,OAAO;AACLW,IAAAA,OAAO,EAAET,UADJ;AAELU,IAAAA,QAAQ,EAAEX,kBAFL;AAGLF,IAAAA,CAAC,EAAEA,CAHE;AAILC,IAAAA,CAAC,EAAEA;AAJE,GAAP,CADK,EAOL,CAACC,kBAAD,EAAqBC,UAArB,EAAiCH,CAAjC,EAAoCC,CAApC,CAPK,CAAP;AASD","sourcesContent":["import { useMemo } from 'react'\nimport { Gesture, PanGesture } from 'react-native-gesture-handler'\nimport Reanimated, { useSharedValue } from 'react-native-reanimated'\n\ninterface Config {\n  enabled: boolean\n  holdDuration: number\n}\n\ninterface Result {\n  x: Reanimated.SharedValue<number>\n  y: Reanimated.SharedValue<number>\n  isActive: Reanimated.SharedValue<boolean>\n  gesture: PanGesture\n}\n\nexport function usePanGesture({ enabled, holdDuration = 300 }: Config): Result {\n  const x = useSharedValue(0)\n  const y = useSharedValue(0)\n  const isPanGestureActive = useSharedValue(false)\n\n  const panGesture = useMemo(\n    () =>\n      Gesture.Pan()\n        .enabled(enabled)\n        .activateAfterLongPress(holdDuration)\n        .onChange((e) => {\n          x.value = e.x\n          y.value = e.y\n        })\n        .onStart(() => {\n          isPanGestureActive.value = true\n        })\n        .onEnd(() => {\n          isPanGestureActive.value = false\n        }),\n    [enabled, holdDuration, isPanGestureActive, x, y]\n  )\n\n  return useMemo(\n    () => ({\n      gesture: panGesture,\n      isActive: isPanGestureActive,\n      x: x,\n      y: y,\n    }),\n    [isPanGestureActive, panGesture, x, y]\n  )\n}\n"]}