{"version":3,"sources":["usePanGesture.ts"],"names":["useMemo","Gesture","useSharedValue","usePanGesture","enabled","holdDuration","x","y","isPanGestureActive","panGesture","Pan","activateAfterLongPress","onChange","e","value","onStart","onEnd","gesture","isActive"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,OAAT,QAAoC,8BAApC;AACA,SAAqBC,cAArB,QAA2C,yBAA3C;AAcA,OAAO,SAASC,aAAT,OAAwE;AAAA,MAAjD;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,YAAY,GAAG;AAA1B,GAAiD;AAC7E,QAAMC,CAAC,GAAGJ,cAAc,CAAC,CAAD,CAAxB;AACA,QAAMK,CAAC,GAAGL,cAAc,CAAC,CAAD,CAAxB;AACA,QAAMM,kBAAkB,GAAGN,cAAc,CAAC,KAAD,CAAzC;AAEA,QAAMO,UAAU,GAAGT,OAAO,CACxB,MACEC,OAAO,CAACS,GAAR,GACGN,OADH,CACWA,OADX,EAEGO,sBAFH,CAE0BN,YAF1B,EAGGO,QAHH,CAGaC,CAAD,IAAO;AACfP,IAAAA,CAAC,CAACQ,KAAF,GAAUD,CAAC,CAACP,CAAZ;AACAC,IAAAA,CAAC,CAACO,KAAF,GAAUD,CAAC,CAACN,CAAZ;AACD,GANH,EAOGQ,OAPH,CAOW,MAAM;AACbP,IAAAA,kBAAkB,CAACM,KAAnB,GAA2B,IAA3B;AACD,GATH,EAUGE,KAVH,CAUS,MAAM;AACXR,IAAAA,kBAAkB,CAACM,KAAnB,GAA2B,KAA3B;AACD,GAZH,CAFsB,EAexB,CAACV,OAAD,EAAUC,YAAV,EAAwBG,kBAAxB,EAA4CF,CAA5C,EAA+CC,CAA/C,CAfwB,CAA1B;AAkBA,SAAOP,OAAO,CACZ,OAAO;AACLiB,IAAAA,OAAO,EAAER,UADJ;AAELS,IAAAA,QAAQ,EAAEV,kBAFL;AAGLF,IAAAA,CAAC,EAAEA,CAHE;AAILC,IAAAA,CAAC,EAAEA;AAJE,GAAP,CADY,EAOZ,CAACC,kBAAD,EAAqBC,UAArB,EAAiCH,CAAjC,EAAoCC,CAApC,CAPY,CAAd;AASD","sourcesContent":["import { useMemo } from 'react'\nimport { Gesture, PanGesture } from 'react-native-gesture-handler'\nimport Reanimated, { useSharedValue } from 'react-native-reanimated'\n\ninterface Config {\n  enabled: boolean\n  holdDuration: number\n}\n\ninterface Result {\n  x: Reanimated.SharedValue<number>\n  y: Reanimated.SharedValue<number>\n  isActive: Reanimated.SharedValue<boolean>\n  gesture: PanGesture\n}\n\nexport function usePanGesture({ enabled, holdDuration = 300 }: Config): Result {\n  const x = useSharedValue(0)\n  const y = useSharedValue(0)\n  const isPanGestureActive = useSharedValue(false)\n\n  const panGesture = useMemo(\n    () =>\n      Gesture.Pan()\n        .enabled(enabled)\n        .activateAfterLongPress(holdDuration)\n        .onChange((e) => {\n          x.value = e.x\n          y.value = e.y\n        })\n        .onStart(() => {\n          isPanGestureActive.value = true\n        })\n        .onEnd(() => {\n          isPanGestureActive.value = false\n        }),\n    [enabled, holdDuration, isPanGestureActive, x, y]\n  )\n\n  return useMemo(\n    () => ({\n      gesture: panGesture,\n      isActive: isPanGestureActive,\n      x: x,\n      y: y,\n    }),\n    [isPanGestureActive, panGesture, x, y]\n  )\n}\n"]}