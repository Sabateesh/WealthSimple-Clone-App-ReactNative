{"version":3,"sources":["CreateGraphPath.ts"],"names":["Skia","PIXEL_RATIO","getGraphPathRange","points","range","minValueX","x","min","date","Date","maxValueX","max","length","minValueY","y","reduce","prev","curr","value","Number","MAX_SAFE_INTEGER","maxValueY","MIN_SAFE_INTEGER","getXPositionInRange","xRange","diff","getTime","getXInRange","width","Math","floor","getYPositionInRange","yRange","getYInRange","height","getPointsInRange","allPoints","filter","point","portionFactorX","createGraphPathBase","pointsInRange","graphData","horizontalPadding","verticalPadding","canvasHeight","canvasWidth","shouldFillGradient","path","Path","Make","drawingWidth","drawingHeight","startX","endX","getGraphDataIndex","pixel","round","getNextPixelValue","index","exactPointX","isExactPointInsidePixelRatio","Array","fill","some","_value","additionalPixel","push","i","moveTo","prevPrev","p0","p1","cp1x","cp1y","cp2x","cp2y","cp3x","cp3y","cubicTo","gradientPath","copy","lineTo","createGraphPath","props","createGraphPathWithGradient"],"mappings":"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","sourcesContent":["import { SkPath, Skia, SkPoint } from '@shopify/react-native-skia'\nimport type { GraphPoint, GraphRange } from './LineGraphProps'\n\nconst PIXEL_RATIO = 2\n\nexport interface GraphXRange {\n  min: Date\n  max: Date\n}\n\nexport interface GraphYRange {\n  min: number\n  max: number\n}\n\nexport interface GraphPathRange {\n  x: GraphXRange\n  y: GraphYRange\n}\n\ntype GraphPathConfig = {\n  /**\n   * Graph Points to use for the Path. Will be normalized and centered.\n   */\n  pointsInRange: GraphPoint[]\n  /**\n   * Optional Padding (left, right) for the Graph to correctly round the Path.\n   */\n  horizontalPadding: number\n  /**\n   * Optional Padding (top, bottom) for the Graph to correctly round the Path.\n   */\n  verticalPadding: number\n  /**\n   * Height of the Canvas (Measured with onLayout)\n   */\n  canvasHeight: number\n  /**\n   * Width of the Canvas (Measured with onLayout)\n   */\n  canvasWidth: number\n  /**\n   * Range of the graph's x and y-axis\n   */\n  range: GraphPathRange\n}\n\ntype GraphPathConfigWithGradient = GraphPathConfig & {\n  shouldFillGradient: true\n}\ntype GraphPathConfigWithoutGradient = GraphPathConfig & {\n  shouldFillGradient: false\n}\n\nexport function getGraphPathRange(\n  points: GraphPoint[],\n  range?: GraphRange\n): GraphPathRange {\n  const minValueX = range?.x?.min ?? points[0]?.date ?? new Date()\n  const maxValueX =\n    range?.x?.max ?? points[points.length - 1]?.date ?? new Date()\n\n  const minValueY =\n    range?.y?.min ??\n    points.reduce(\n      (prev, curr) => (curr.value < prev ? curr.value : prev),\n      Number.MAX_SAFE_INTEGER\n    )\n  const maxValueY =\n    range?.y?.max ??\n    points.reduce(\n      (prev, curr) => (curr.value > prev ? curr.value : prev),\n      Number.MIN_SAFE_INTEGER\n    )\n\n  return {\n    x: { min: minValueX, max: maxValueX },\n    y: { min: minValueY, max: maxValueY },\n  }\n}\n\nexport const getXPositionInRange = (\n  date: Date,\n  xRange: GraphXRange\n): number => {\n  const diff = xRange.max.getTime() - xRange.min.getTime()\n  const x = date.getTime()\n\n  return (x - xRange.min.getTime()) / diff\n}\n\nexport const getXInRange = (\n  width: number,\n  date: Date,\n  xRange: GraphXRange\n): number => {\n  return Math.floor(width * getXPositionInRange(date, xRange))\n}\n\nexport const getYPositionInRange = (\n  value: number,\n  yRange: GraphYRange\n): number => {\n  const diff = yRange.max - yRange.min\n  const y = value\n\n  return (y - yRange.min) / diff\n}\n\nexport const getYInRange = (\n  height: number,\n  value: number,\n  yRange: GraphYRange\n): number => {\n  return Math.floor(height * getYPositionInRange(value, yRange))\n}\n\nexport const getPointsInRange = (\n  allPoints: GraphPoint[],\n  range: GraphPathRange\n) => {\n  return allPoints.filter((point) => {\n    const portionFactorX = getXPositionInRange(point.date, range.x)\n    return portionFactorX <= 1 && portionFactorX >= 0\n  })\n}\n\ntype GraphPathWithGradient = { path: SkPath; gradientPath: SkPath }\n\nfunction createGraphPathBase(\n  props: GraphPathConfigWithGradient\n): GraphPathWithGradient\nfunction createGraphPathBase(props: GraphPathConfigWithoutGradient): SkPath\n\nfunction createGraphPathBase({\n  pointsInRange: graphData,\n  range,\n  horizontalPadding,\n  verticalPadding,\n  canvasHeight: height,\n  canvasWidth: width,\n  shouldFillGradient,\n}: GraphPathConfigWithGradient | GraphPathConfigWithoutGradient):\n  | SkPath\n  | GraphPathWithGradient {\n  const path = Skia.Path.Make()\n\n  // Canvas width substracted by the horizontal padding => Actual drawing width\n  const drawingWidth = width - 2 * horizontalPadding\n  // Canvas height substracted by the vertical padding => Actual drawing height\n  const drawingHeight = height - 2 * verticalPadding\n\n  if (graphData[0] == null) return path\n\n  const points: SkPoint[] = []\n\n  const startX =\n    getXInRange(drawingWidth, graphData[0]!.date, range.x) + horizontalPadding\n  const endX =\n    getXInRange(drawingWidth, graphData[graphData.length - 1]!.date, range.x) +\n    horizontalPadding\n\n  const getGraphDataIndex = (pixel: number) =>\n    Math.round(((pixel - startX) / (endX - startX)) * (graphData.length - 1))\n\n  const getNextPixelValue = (pixel: number) => {\n    if (pixel === endX || pixel + PIXEL_RATIO < endX) return pixel + PIXEL_RATIO\n    return endX\n  }\n\n  for (\n    let pixel = startX;\n    startX <= pixel && pixel <= endX;\n    pixel = getNextPixelValue(pixel)\n  ) {\n    const index = getGraphDataIndex(pixel)\n\n    // Draw first point only on the very first pixel\n    if (index === 0 && pixel !== startX) continue\n    // Draw last point only on the very last pixel\n\n    if (index === graphData.length - 1 && pixel !== endX) continue\n\n    if (index !== 0 && index !== graphData.length - 1) {\n      // Only draw point, when the point is exact\n      const exactPointX =\n        getXInRange(drawingWidth, graphData[index]!.date, range.x) +\n        horizontalPadding\n\n      const isExactPointInsidePixelRatio = Array(PIXEL_RATIO)\n        .fill(0)\n        .some((_value, additionalPixel) => {\n          return pixel + additionalPixel === exactPointX\n        })\n\n      if (!isExactPointInsidePixelRatio) continue\n    }\n\n    const value = graphData[index]!.value\n    const y =\n      drawingHeight -\n      getYInRange(drawingHeight, value, range.y) +\n      verticalPadding\n\n    points.push({ x: pixel, y: y })\n  }\n\n  for (let i = 0; i < points.length; i++) {\n    const point = points[i]!\n\n    // first point needs to start the path\n    if (i === 0) path.moveTo(point.x, point.y)\n\n    const prev = points[i - 1]\n    const prevPrev = points[i - 2]\n\n    if (prev == null) continue\n\n    const p0 = prevPrev ?? prev\n    const p1 = prev\n    const cp1x = (2 * p0.x + p1.x) / 3\n    const cp1y = (2 * p0.y + p1.y) / 3\n    const cp2x = (p0.x + 2 * p1.x) / 3\n    const cp2y = (p0.y + 2 * p1.y) / 3\n    const cp3x = (p0.x + 4 * p1.x + point.x) / 6\n    const cp3y = (p0.y + 4 * p1.y + point.y) / 6\n\n    path.cubicTo(cp1x, cp1y, cp2x, cp2y, cp3x, cp3y)\n\n    if (i === points.length - 1) {\n      path.cubicTo(point.x, point.y, point.x, point.y, point.x, point.y)\n    }\n  }\n\n  if (!shouldFillGradient) return path\n\n  const gradientPath = path.copy()\n\n  gradientPath.lineTo(endX, height + verticalPadding)\n  gradientPath.lineTo(0 + horizontalPadding, height + verticalPadding)\n\n  return { path: path, gradientPath: gradientPath }\n}\n\nexport function createGraphPath(props: GraphPathConfig): SkPath {\n  return createGraphPathBase({ ...props, shouldFillGradient: false })\n}\n\nexport function createGraphPathWithGradient(\n  props: GraphPathConfig\n): GraphPathWithGradient {\n  return createGraphPathBase({\n    ...props,\n    shouldFillGradient: true,\n  })\n}\n"]}