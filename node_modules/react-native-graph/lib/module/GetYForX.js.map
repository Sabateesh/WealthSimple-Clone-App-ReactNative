{"version":3,"sources":["GetYForX.ts"],"names":["PathVerb","vec","round","value","precision","p","Math","pow","cuberoot","x","y","abs","solveCubic","a","b","c","d","D","sqrt","q","roots","concat","u","t","acos","k","PI","cos","i","length","cubicBezier","from","c1","c2","to","term","cubicBezierYForX","pa","pb","pc","pd","ts","map","root","filter","selectCurve","cmds","cmd","undefined","Move","Cubic","getYForX"],"mappings":"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","sourcesContent":["import type { Vector, PathCommand } from '@shopify/react-native-skia'\nimport { PathVerb, vec } from '@shopify/react-native-skia'\n\n// code from William Candillon\n\nconst round = (value: number, precision = 0): number => {\n  'worklet'\n\n  const p = Math.pow(10, precision)\n  return Math.round(value * p) / p\n}\n\n// https://stackoverflow.com/questions/27176423/function-to-solve-cubic-equation-analytically\nconst cuberoot = (x: number): number => {\n  'worklet'\n\n  const y = Math.pow(Math.abs(x), 1 / 3)\n  return x < 0 ? -y : y\n}\n\nconst solveCubic = (a: number, b: number, c: number, d: number): number[] => {\n  'worklet'\n\n  if (Math.abs(a) < 1e-8) {\n    // Quadratic case, ax^2+bx+c=0\n    a = b\n    b = c\n    c = d\n    if (Math.abs(a) < 1e-8) {\n      // Linear case, ax+b=0\n      a = b\n      b = c\n      if (Math.abs(a) < 1e-8) {\n        // Degenerate case\n        return []\n      }\n      return [-b / a]\n    }\n\n    const D = b * b - 4 * a * c\n    if (Math.abs(D) < 1e-8) return [-b / (2 * a)]\n    if (D > 0)\n      return [(-b + Math.sqrt(D)) / (2 * a), (-b - Math.sqrt(D)) / (2 * a)]\n\n    return []\n  }\n\n  // Convert to depressed cubic t^3+pt+q = 0 (subst x = t - b/3a)\n  const p = (3 * a * c - b * b) / (3 * a * a)\n  const q = (2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * a * a * a)\n  let roots\n\n  if (Math.abs(p) < 1e-8) {\n    // p = 0 -> t^3 = -q -> t = -q^1/3\n    roots = [cuberoot(-q)]\n  } else if (Math.abs(q) < 1e-8) {\n    // q = 0 -> t^3 + pt = 0 -> t(t^2+p)=0\n    roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : [])\n  } else {\n    const D = (q * q) / 4 + (p * p * p) / 27\n    if (Math.abs(D) < 1e-8) {\n      // D = 0 -> two roots\n      roots = [(-1.5 * q) / p, (3 * q) / p]\n    } else if (D > 0) {\n      // Only one real root\n      const u = cuberoot(-q / 2 - Math.sqrt(D))\n      roots = [u - p / (3 * u)]\n    } else {\n      // D < 0, three roots, but needs to use complex numbers/trigonometric solution\n      const u = 2 * Math.sqrt(-p / 3)\n      const t = Math.acos((3 * q) / p / u) / 3 // D < 0 implies p < 0 and acos argument in [-1..1]\n      const k = (2 * Math.PI) / 3\n      roots = [u * Math.cos(t), u * Math.cos(t - k), u * Math.cos(t - 2 * k)]\n    }\n  }\n\n  // Convert back from depressed cubic\n  for (let i = 0; i < roots.length; i++) roots[i] -= b / (3 * a)\n\n  return roots\n}\n\nconst cubicBezier = (\n  t: number,\n  from: number,\n  c1: number,\n  c2: number,\n  to: number\n): number => {\n  'worklet'\n\n  const term = 1 - t\n  const a = 1 * term ** 3 * t ** 0 * from\n  const b = 3 * term ** 2 * t ** 1 * c1\n  const c = 3 * term ** 1 * t ** 2 * c2\n  const d = 1 * term ** 0 * t ** 3 * to\n  return a + b + c + d\n}\n\nexport const cubicBezierYForX = (\n  x: number,\n  a: Vector,\n  b: Vector,\n  c: Vector,\n  d: Vector,\n  precision = 2\n): number => {\n  'worklet'\n\n  const pa = -a.x + 3 * b.x - 3 * c.x + d.x\n  const pb = 3 * a.x - 6 * b.x + 3 * c.x\n  const pc = -3 * a.x + 3 * b.x\n  const pd = a.x - x\n  const ts = solveCubic(pa, pb, pc, pd)\n    .map((root) => round(root, precision))\n    .filter((root) => root >= 0 && root <= 1)\n  const t = ts[0]\n  if (t == null) return 0\n  return cubicBezier(t, a.y, b.y, c.y, d.y)\n}\n\ninterface Cubic {\n  from: Vector\n  c1: Vector\n  c2: Vector\n  to: Vector\n}\n\nexport const selectCurve = (\n  cmds: PathCommand[],\n  x: number\n): Cubic | undefined => {\n  'worklet'\n\n  let from: Vector = vec(0, 0)\n  for (let i = 0; i < cmds.length; i++) {\n    const cmd = cmds[i]\n    if (cmd == null) return undefined\n    if (cmd[0] === PathVerb.Move) {\n      from = vec(cmd[1], cmd[2])\n    } else if (cmd[0] === PathVerb.Cubic) {\n      const c1 = vec(cmd[1], cmd[2])\n      const c2 = vec(cmd[3], cmd[4])\n      const to = vec(cmd[5], cmd[6])\n      if (x >= from.x && x <= to.x) {\n        return {\n          from,\n          c1,\n          c2,\n          to,\n        }\n      }\n      from = to\n    }\n  }\n  return undefined\n}\n\nexport const getYForX = (\n  cmds: PathCommand[],\n  x: number,\n  precision = 2\n): number | undefined => {\n  'worklet'\n\n  const c = selectCurve(cmds, x)\n  if (c == null) return undefined\n\n  return cubicBezierYForX(x, c.from, c.c1, c.c2, c.to, precision)\n}\n"]}