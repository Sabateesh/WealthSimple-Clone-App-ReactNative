{"version":3,"names":["Host","JsiSkSurface","JsiSkSurfaceFactory","constructor","CanvasKit","Make","width","height","pixelLen","pixelPtr","Malloc","Uint8Array","surface","MakeRasterDirectSurface","colorType","ColorType","RGBA_8888","alphaType","AlphaType","Unpremul","colorSpace","ColorSpace","SRGB","getCanvas","clear","TRANSPARENT","Free","MakeOffscreen","OC","globalThis","OffscreenCanvas","undefined","offscreen","webglContext","GetWebGLContext","grContext","MakeWebGLContext","Error","MakeRenderTarget"],"sources":["JsiSkSurfaceFactory.ts"],"sourcesContent":["import type { CanvasKit, Surface } from \"canvaskit-wasm\";\n\nimport type { SurfaceFactory } from \"../types\";\n\nimport { Host } from \"./Host\";\nimport { JsiSkSurface } from \"./JsiSkSurface\";\n\nexport class JsiSkSurfaceFactory extends Host implements SurfaceFactory {\n  constructor(CanvasKit: CanvasKit) {\n    super(CanvasKit);\n  }\n\n  Make(width: number, height: number) {\n    var pixelLen = width * height * 4;\n    const pixelPtr = this.CanvasKit.Malloc(Uint8Array, pixelLen);\n    const surface = this.CanvasKit.MakeRasterDirectSurface(\n      {\n        width: width,\n        height: height,\n        colorType: this.CanvasKit.ColorType.RGBA_8888,\n        alphaType: this.CanvasKit.AlphaType.Unpremul,\n        colorSpace: this.CanvasKit.ColorSpace.SRGB,\n      },\n      pixelPtr,\n      width * 4\n    );\n    if (!surface) {\n      return null;\n    }\n    surface.getCanvas().clear(this.CanvasKit.TRANSPARENT);\n    return new JsiSkSurface(this.CanvasKit, surface, () => {\n      this.CanvasKit.Free(pixelPtr);\n    });\n  }\n\n  MakeOffscreen(width: number, height: number) {\n    // OffscreenCanvas may be unvailable in some environments.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const OC = (globalThis as any).OffscreenCanvas;\n    let surface: Surface | null;\n    if (OC === undefined) {\n      return this.Make(width, height);\n    } else {\n      const offscreen = new OC(width, height);\n      const webglContext = this.CanvasKit.GetWebGLContext(offscreen);\n      const grContext = this.CanvasKit.MakeWebGLContext(webglContext);\n      if (!grContext) {\n        throw new Error(\"Could not make a graphics context\");\n      }\n      surface = this.CanvasKit.MakeRenderTarget(grContext, width, height);\n    }\n    if (!surface) {\n      return null;\n    }\n    return new JsiSkSurface(this.CanvasKit, surface);\n  }\n}\n"],"mappings":"AAIA,SAASA,IAAI,QAAQ,QAAQ;AAC7B,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,OAAO,MAAMC,mBAAmB,SAASF,IAAI,CAA2B;EACtEG,WAAWA,CAACC,SAAoB,EAAE;IAChC,KAAK,CAACA,SAAS,CAAC;EAClB;EAEAC,IAAIA,CAACC,KAAa,EAAEC,MAAc,EAAE;IAClC,IAAIC,QAAQ,GAAGF,KAAK,GAAGC,MAAM,GAAG,CAAC;IACjC,MAAME,QAAQ,GAAG,IAAI,CAACL,SAAS,CAACM,MAAM,CAACC,UAAU,EAAEH,QAAQ,CAAC;IAC5D,MAAMI,OAAO,GAAG,IAAI,CAACR,SAAS,CAACS,uBAAuB,CACpD;MACEP,KAAK,EAAEA,KAAK;MACZC,MAAM,EAAEA,MAAM;MACdO,SAAS,EAAE,IAAI,CAACV,SAAS,CAACW,SAAS,CAACC,SAAS;MAC7CC,SAAS,EAAE,IAAI,CAACb,SAAS,CAACc,SAAS,CAACC,QAAQ;MAC5CC,UAAU,EAAE,IAAI,CAAChB,SAAS,CAACiB,UAAU,CAACC;IACxC,CAAC,EACDb,QAAQ,EACRH,KAAK,GAAG,CACV,CAAC;IACD,IAAI,CAACM,OAAO,EAAE;MACZ,OAAO,IAAI;IACb;IACAA,OAAO,CAACW,SAAS,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAACpB,SAAS,CAACqB,WAAW,CAAC;IACrD,OAAO,IAAIxB,YAAY,CAAC,IAAI,CAACG,SAAS,EAAEQ,OAAO,EAAE,MAAM;MACrD,IAAI,CAACR,SAAS,CAACsB,IAAI,CAACjB,QAAQ,CAAC;IAC/B,CAAC,CAAC;EACJ;EAEAkB,aAAaA,CAACrB,KAAa,EAAEC,MAAc,EAAE;IAC3C;IACA;IACA,MAAMqB,EAAE,GAAIC,UAAU,CAASC,eAAe;IAC9C,IAAIlB,OAAuB;IAC3B,IAAIgB,EAAE,KAAKG,SAAS,EAAE;MACpB,OAAO,IAAI,CAAC1B,IAAI,CAACC,KAAK,EAAEC,MAAM,CAAC;IACjC,CAAC,MAAM;MACL,MAAMyB,SAAS,GAAG,IAAIJ,EAAE,CAACtB,KAAK,EAAEC,MAAM,CAAC;MACvC,MAAM0B,YAAY,GAAG,IAAI,CAAC7B,SAAS,CAAC8B,eAAe,CAACF,SAAS,CAAC;MAC9D,MAAMG,SAAS,GAAG,IAAI,CAAC/B,SAAS,CAACgC,gBAAgB,CAACH,YAAY,CAAC;MAC/D,IAAI,CAACE,SAAS,EAAE;QACd,MAAM,IAAIE,KAAK,CAAC,mCAAmC,CAAC;MACtD;MACAzB,OAAO,GAAG,IAAI,CAACR,SAAS,CAACkC,gBAAgB,CAACH,SAAS,EAAE7B,KAAK,EAAEC,MAAM,CAAC;IACrE;IACA,IAAI,CAACK,OAAO,EAAE;MACZ,OAAO,IAAI;IACb;IACA,OAAO,IAAIX,YAAY,CAAC,IAAI,CAACG,SAAS,EAAEQ,OAAO,CAAC;EAClD;AACF"}